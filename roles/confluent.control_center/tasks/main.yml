---
- include_role:
    name: common
  when: not common_role_completed|bool
  tags: common

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn

- name: Stop Service and Remove Packages on Version Change
  include_role:
    name: common
    tasks_from: remove_packages.yml
  vars:
    service_name: "{{ control_center_service_name }}"
  when: installation_method == "package"
  tags: package

# Install Packages
- name: Install the Control Center Packages
  yum:
    name: "{{ control_center_packages | product([confluent_package_redhat_suffix]) | map('join') | list }}"
    state: latest
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart control center

- name: Install the Control Center Packages
  apt:
    name: "{{ control_center_packages | product([confluent_package_debian_suffix]) | map('join') | list }}"
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart control center

# Configure environment
- name: Create Control Center Group
  group:
    name: "{{control_center_group}}"

- name: Create Control Center User
  user:
    name: "{{control_center_user}}"
    comment: "Control Center User"
    system: true
    group: "{{control_center_group}}"

- name: Set Control Center Data Dir permissions
  file:
    path: "{{control_center_final_properties['confluent.controlcenter.data.dir']}}"
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
    state: directory
    mode: 0750

- name: Set Control Center Data Dir file permissions
  file:
    path: "{{control_center_final_properties['confluent.controlcenter.data.dir']}}"
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
    recurse: true

# Archive File deployments need to create SystemD service units
# Copy the tarball's systemd service to the system
- name: Copy Control Center Service from archive file to system
  copy:
    src: "{{binary_base_path}}/lib/systemd/system/{{control_center.systemd_file|basename}}"
    remote_src: true
    dest: "{{control_center.systemd_file}}"
    mode: 0644
    force: true
  when: installation_method == "archive"

- include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{control_center_truststore_storepass}}"
    truststore_path: "{{control_center_truststore_path}}"
    keystore_path: "{{control_center_keystore_path}}"
    keystore_storepass: "{{control_center_keystore_storepass}}"
    keystore_keypass: "{{control_center_keystore_keypass}}"
    service_name: control_center
    user: "{{control_center_user}}"
    group: "{{control_center_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host, hostname|default(omit)] | unique }}"
    ca_cert_path: "{{control_center_ca_cert_path}}"
    cert_path: "{{control_center_cert_path}}"
    key_path: "{{control_center_key_path}}"
    export_certs: "{{control_center_export_certs}}"
  # CCloud Kafka does not need Keystores/Truststores
  when: >
    control_center_ssl_enabled|bool or
    ( kafka_broker_listeners[control_center_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool and not public_certificates_enabled|bool ) or
    ( mds_tls_enabled | bool and not public_certificates_enabled|bool )
  tags: ssl

- name: Configure Kerberos
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{control_center_group}}"
    kerberos_user: "{{control_center_user}}"
    kerberos_keytab_path: "{{control_center_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{control_center_keytab_path}}"
    kerberos_handler: "restart control center"
  when: kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Copy Custom Control Center Files
  include_role:
    name: common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{control_center_copy_files}}"
    user: "{{control_center_user}}"
    group: "{{control_center_group}}"
  when: control_center_copy_files | length > 0

- name: Configure RBAC
  include_tasks: rbac.yml
  when: rbac_enabled|bool

- name: Create Control Center Config directory
  file:
    path: "{{ control_center.config_file | dirname }}"
    state: directory
    mode: 0750
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"

- name: Create Control Center Config with Secrets Protection
  include_role:
    name: common
    tasks_from: secrets_protection.yml
  vars:
    encrypt_passwords: "{{ control_center_secrets_protection_encrypt_passwords }}"
    properties: "{{ control_center_secrets_protection_encrypt_properties }}"
    config_path: "{{ control_center.config_file }}"
    config_template: control-center.properties.j2
    secrets_file: "{{ control_center_secrets_protection_file }}"
    secrets_file_owner: "{{ control_center_user }}"
    secrets_file_group: "{{ control_center_group }}"
    handler: restart control center
  when: control_center_secrets_protection_enabled|bool

- name: Create Control Center Config
  template:
    src: control-center.properties.j2
    dest: "{{control_center.config_file}}"
    mode: 0640
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
  notify: restart control center
  when: not control_center_secrets_protection_enabled|bool

- name: Set Permissions on /var/log/confluent
  file:
    path: /var/log/confluent/
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
    mode: 0770
    state: directory

- name: Create Logs Directory
  file:
    path: "{{control_center_log_dir}}"
    state: directory
    group: "{{control_center_group}}"
    owner: "{{control_center_user}}"
    mode: 0770

- name: Update log4j Config for Log Cleanup
  include_role:
    name: common
    tasks_from: update_log4j.yml
  vars:
    log4j_file: "{{control_center.log4j_file}}"
    log4j_max_backup_index: "{{control_center_max_log_files}}"
    log4j_max_file_size: "{{control_center_log_file_size}}"
    log4j_root_logger: "{{control_center_log4j_root_logger}}"
    handler: "restart control center"
  when: control_center_custom_log4j|bool

- name: Set Permissions on Log4j Conf
  file:
    path: "{{control_center.log4j_file}}"
    group: "{{control_center_group}}"
    owner: "{{control_center_user}}"
    mode: 0640

- name: Create RocksDB Directory
  file:
    path: "{{control_center_rocksdb_path}}"
    group: "{{control_center_group}}"
    owner: "{{control_center_user}}"
    mode: 0750
    state: directory
  when: control_center_rocksdb_path != ""

- name: Set Permission to RocksDB Files
  file:
    path: "{{control_center_rocksdb_path}}"
    group: "{{control_center_group}}"
    owner: "{{control_center_user}}"
    recurse: true
  when: control_center_rocksdb_path != ""

- name: Create Basic Auth Jaas File
  template:
    src: jaas.conf.j2
    dest: "{{control_center.jaas_file}}"
    mode: 0640
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
  notify: restart control center
  when: control_center_authentication_type == 'basic'

- name: Create Basic Auth Password File
  template:
    src: password.properties.j2
    dest: "{{control_center.password_file}}"
    mode: 0640
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
  notify: restart control center
  when: control_center_authentication_type == 'basic'

- name: Create Service Override Directory
  file:
    path: "{{control_center.systemd_override | dirname}}"
    state: directory
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{control_center.systemd_override}}"
    mode: 0640
    owner: "{{control_center_user}}"
    group: "{{control_center_group}}"
  notify: restart control center

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart control center
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Control Center Service
  systemd:
    name: "{{control_center_service_name}}"
    enabled: true
    state: started

- name: Health Check
  include_tasks: health_check.yml
  when:
    - control_center_health_checks_enabled|bool
    - not ansible_check_mode
